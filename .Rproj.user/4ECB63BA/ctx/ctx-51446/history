self$Freq <- sum(self$purchase_stringM)
self$transaction_range_complete <- nchar(self$purchase_string)
self$logistic_modeling_matridf_customer <-
f_CustomerModelingMatridf_customer(self$T)
self$transaction_string <-
paste(
ifelse(self$logistic_modeling_matridf_customer[, 2] == 0, "Y", "N"),
sep = "",
collapse = ""
)
#analysis by day
self$daily$purchase_count <- length(self$transaction_dates)
self$daily$frequency <- length(unique(self$transaction_dates))
#analysis by week
self$weekly$Frequency <- length(unique(df_customer$yr_week))
self$output <- list(c(self$global, self$monthly))
self$payload <- jsonlite::toJSON(self$output)
}
)
)
cust <- split.transaction.file_to_CADF(transactions)
#' R6 Class representing a customer.  Otherwise known as the CADF.
#'
#' Call Customer$new() to convert transactional data to CADF format
# Common ways that this class is used.
# 1.) Load transactional data.  Make sure to format dates and only pull ID and prchase date
# If you are testing send a single customerid and data for a single customer to id_to_CADF.
# If your data contains multiple customer id's
# 2.) Split the data from 2 using the R split function
# 3.) Call -> split.transaction.file_to_CADF
#' @edf_customerport Customer
#' @param ... All arguements in list
#'
#' data(transactions)
#' a <- split(transactions, transactions$ID)
#' cust <- split.transaction.file_to_CADF(transactions)
#' cust[[1]]
#'
Customer <- R6::R6Class(
"Customer",
public = list(
#' @field output Stores all information in R format at the customer level.
output = NULL ,
#'@field payload Stores all computed customer information in JSON format.  This is not quite an API but designed so that customer information can be imported to other formats and systems.
payload = NULL,
#'@field df_customer a data frame that stores purchase information for a single customer
df_customer = NULL,
#' @field id The customer id.  This will be the same ID as provided in the input transaction file.
id = NULL,
#' @field study_name.  A name to associate with the cohort study.#The name can be whatever is easiest to associate with the set of customer id and dates included in
#' the analysis.
study_name = "Customer Study",
#' @field study_begin_date  Begin date of the customer study.  In theory this should be min(TRANSACTION_DATE) for each customer in the dataset.
study_begin_date = NULL,
#' @field timing.
#' Monthly timing computes T as months. Most commonly utilized and is the default.
timing = NULL,
#' @field transaction_dates.  Description goes here
transaction_dates = NULL,
#' @field first_purchase_date.  First purchase date for the customer.
first_purchase_date = NULL,
#'@field last_purchase_date.  Last purchaes date for the customer.
last_purchase_date = NULL,
#' #' @field repeat_customer.  Marked yes if the following conditions
#' are true.  The customer has more than one transaction.  The second transaction
#' date is greater than the first transaction date.
repeat_customer = NULL ,
#'  #' @field  T a measure of time between first date of activity and purchase.
T  = NULL,
#' @field transaction_range_complete  shows a consecutive sequence usually beginning at 1 to madf_customerimum T
transaction_range_complete = NULL,
#' @field logistic_modeling_matridf_customer  customer-level data for logistic modeling.  Each row represents T and 0 is no purchase and 1 is purchase
logistic_modeling_matridf_customer = NULL,
#' @field purchase_count purchase count
purchase_count = NULL,
#' @field data  Holds data at the customer level
data = NULL,
#' @description
#' Creates a CADF profile for a given customer
#' based on the input transactional data
#' @return A new `Customer` object.  Converted transactional data to CADF format.
#' To access cadf[[1]], etc...
#' Represents customer data (for a particular id) in the "CADF" format
initialize = function(...) {
stopifnot(CADF::qc_transactional_data(df_customer) == 2)
browser()
#' @field Tdays to compute "days from first purchase"
df_customer$Tdays <- ceiling(as.numeric(df_customer[[2]] - min(df_customer[[2]])))
#to compute "months from first purchase"
df_customer$month_yr <- format(as.Date(df_customer[[2]]), "%Y-%m")
df_customer$Tmonths <- ceiling(as.numeric(df_customer[[2]] - min(df_customer[[2]])) / 30)
#to compute "weeks from first purchase
df_customer$yr_week = paste(format(as.Date(df_customer[[2]]), "%Y") , "_" , format(as.Date(df_customer[[2]]), "%V"), sep =
"")
df_customer$Tweeks <- as.numeric(df_customer[[2]] - min(df_customer[[2]])) / 7
#sort for output
df_customer <- df_customer[order(df_customer[[2]]), ]
self$data = df_customer
self$id = min(df_customer[, 1])
self$transaction_dates <- unique(df_customer[, 2])
self$transaction_months <- unique(df_customer$month_yr)
self$first_purchase_date <- min(df_customer[, 2])
self$last_purchase_date <- madf_customer(df_customer[, 2])
self$repeat_customer <-
ifelse(length(unique(self$transaction_months)) > 1, "Y", "N")
#construct the purchase string
self$purchase_string <- NULL
self$transaction_dates = format(self$transaction_dates, "%Y_%m")
self$purchase_count = length(unique(self$transaction_dates))  #monthly count
self$purchase_string <-
create.purchase.string(df_customer, names(df_customer[1]), names(df_customer[2]))
self$purchase_stringM <-
create.purchase.string(df_customer, names(df_customer[1]), names(df_customer[2]), mode = "matridf_customer")
self$purchase_stringF <- frequency_by_T(df_customer)
self$T <- ps_to_T(self$purchase_string)
self$Freq <- sum(self$purchase_stringM)
self$transaction_range_complete <- nchar(self$purchase_string)
self$logistic_modeling_matridf_customer <-
f_CustomerModelingMatridf_customer(self$T)
self$transaction_string <-
paste(
ifelse(self$logistic_modeling_matridf_customer[, 2] == 0, "Y", "N"),
sep = "",
collapse = ""
)
#analysis by day
self$daily$purchase_count <- length(self$transaction_dates)
self$daily$frequency <- length(unique(self$transaction_dates))
#analysis by week
self$weekly$Frequency <- length(unique(df_customer$yr_week))
self$output <- list(c(self$global, self$monthly))
self$payload <- jsonlite::toJSON(self$output)
}
)
)
cust <- split.transaction.file_to_CADF(transactions)
cust <- split.transaction.file_to_CADF(transactions)
data(transactions)
cust <- split.transaction.file_to_CADF(transactions)
cust <- split.transaction.file_to_CADF(transactions, timing="month")
head(transactions)
a <- split(transactions, transactions$ID)
cust <- split.transaction.file_to_CADF(a)
head(a)
head(a)
a[[1]]
a[2]
library(CADF)
cust <- split.transaction.file_to_CADF(a)
head(a)
lapply(a, print)
lapply(a, browser)
x
ls()
X
ls()
q
q()
exit
library(CADF)
cust <- split.transaction.file_to_CADF(a)a
cust <- split.transaction.file_to_CADF(a)
x <- a$`2`
x
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
cust <- split.transaction.file_to_CADF(a)
cust <- split.transaction.file_to_CADF(a)
cust <- split.transaction.file_to_CADF(a)
cust <- split.transaction.file_to_CADF(a)
x
cust <- split.transaction.file_to_CADF(a)
cust <- split.transaction.file_to_CADF(a)
df_customer
unique(df_customer$month_yr)
cust <- split.transaction.file_to_CADF(a)
self$data
cust <- split.transaction.file_to_CADF(a)
self$df_customer
df_customer
self$df_customer
df_customer
gc()
cust <- split.transaction.file_to_CADF(a)
df_customer
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
q
cust <- split.transaction.file_to_CADF(a)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
self$T
df_customer
self$purchase_stringM
nchar(self$purchase_string)
self$purchase_stringF
self$transaction_range_complete
self$purchase_string
self$transaction_range_complete <- nchar(self$purchase_string)
self$purchase_string
self$repeat_customer
df_customer
library(CADF)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
self$T
self&T
self$T
library(CADF)
cust <- split.transaction.file_to_CADF(a)
self$logistic_modeling_matrix <- f_CustomerModelingMatrix(self$T)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
library(CADF)
cust <- split.transaction.file_to_CADF(a)
cust
str(a)
length(cust)
sample(1:length(a))
sample(1:length(a), 1)
b <- sample(1:length(a), 1)
b
cust <- split.transaction.file_to_CADF(b)
cust
cust
cust[[1]]
cust[[1]]
cust[[1]]$data
a[b]
cust[[1]]$data2
cust@data
str(cust)
cust[[1]]$data
a[b]
b
a[[b]]
b <- sample(1:length(a), 1)
b
a[[b]]
cust <- split.transaction.file_to_CADF(a[[b]])
cust
cust <- split.transaction.file_to_CADF(a[[b]])
cust
cust$data
b
a[[b]]
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2[[1]]$data
cust2[[1]]
b <- sample(1:length(a), 1)
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2 <- split.transaction.file_to_CADF(a[[b]])
library(CADF)
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2[[1]]$data
cust[[1]]$first_purchase_date
cust[[1]]$first_purchase_date
cust2[[1]]$logistic_modeling_matridf_customer
cust2[[1]]$logistic_modeling_matrix
b <- sample(1:length(a), 1)
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2[[1]]$logistic_modeling_matrix
cust2[[1]]$data
b <- sample(1:length(a), 1)
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2[[1]]$data
b <- sample(1:length(a), 1)
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2[[1]]$data
b <- sample(1:length(a), 1)
b
cust2 <- split.transaction.file_to_CADF(a[[b]])
a[[b]]
b <- sample(1:length(a), 1)
b <- sample(1:length(a), 1)
a[[b]]
b <- sample(1:length(a), 1)
a[[b]]
b <- sample(1:length(a), 1)
a[[b]]
b <- sample(1:length(a), 1)
a[[b]]
cust2 <- split.transaction.file_to_CADF(a[[b]])
cust2[[1]]$logistic_modeling_matrix
cust2[[1]]$data
cust2
split.transaction.file_to_CADF(a[[b]])
data
str(data)
id_to_CADF()
id_to_CADF
test <- Customer$new(a[[b]])
test <- Customer$new(df_customer = a[[b]])
test
test <- Customer$new(df_customer = a[[b]])
a[[b]]
test <- Customer$new(a[[b]])
x
df_customer
dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff_customer
df_customer <- a[[b]]
test <- Customer$new(df_____________________________________________________________________________________________________________________________customer)
Customer$new(df_customer)
df_customer
a <- Customer$new(df_customer)
a <- split(transactions, transactions$ID)
b <- sample(1:length(a), 1)
b
cust <- Customer$new(a[[b]])
cust
str(cust)
cust[[1]]
cust$ID
cust <- NULL
cust <- Customer$new(a[[b]])
cust
library(CADF)
a
a
a <- split(transactions, transactions$ID)
a
b <- sample(1:length(a), 1)
b
cust <- Customer$new(a[[b]])
cust <- CADF::Customer$new(a[[b]])
library(CADF)
cust <- CADF::Customer$new(a[[b]])
library(CADF)
cust <- CADF::Customer$new(a[[b]])
library(CADF)
cust <- CADF::Customer$new(a[[b]])
cust
head(cust)
cust[[1]]
cust[1]
cust@timing
cust$timing
a[[b]]
b <- sample(1:length(a), 1)
b
a[[b]]
a
a[length(a) > 5]
a[[length(a) > 5]]
a[[length(a) > 5]]
a[[1]]
nrow(a[[1]])
which(a, length(a) > 5)
lapply(a, function(x) length(x))
lapply(a, length)
a[[lapply(a, length)]]
lapply(a, length)
unlist(lapply(a, length))
a.filter <- unlist(lapply, a, length))
a.filter <- unlist(lapply, a, length)
a.filter
a.filter <- unlist(lapply(a, length))
a.filter
b <- sample(1:length(a.filter), 1)
b
a[[b]]
a.filter
Filter
?match.fun
match.fun("*")
Filter(a, length(a)> 4)
do.call(rbind, Filter(function(x) length(x)==11, ips.info))
do.call(rbind, Filter(function(x) length(x)==11, a))
do.call(rbind, Filter(function(x) length(x)==4, a))
Filter(function(x) length(x)==11, a)
Filter(function(x) length(x) > 2, a)
library(CADF)
a <- split(transactions, transactions$ID)
a
a <- Filter(function(x) length(x) > 2, a)
a
b <- sample(1:length(a), 1)
cust <- Customer$new(a[[b]])
cust
a[[b]]
length(a)
a
a <- Filter(function(x) length(x) > 2, a)
a
a <- Filter(function(x) nrow(x) > 2, a)
a
a <- Filter(function(x) nrow(x) > 2, a)
a
b
a[[b]]
b <- sample(1:length(a), 1)
b
a[[b]]
cust <- Customer$new(a[[b]])
cust$data
cust$first_purchase_date
cust$transaction_months
cust$purchase_string
cust$logistic_modeling_matridf_customer
cust$repeat_customer
cust$transaction_dates
cust$data
cust$purchase_string
names(cust$data[1])
cust$purchase_stringF
cust$T
cust
cust$T
ps_t_T(self$purchase_string)
ps_to_T(self$purchase_string)
ps_to_T(cust$purchase_string)
CADF::ps_to_T(cust$purchase_string)
cust$purchase_string
ps <- cust$purchase_string
a <- strsplit(ps, split = '')
a <- unlist(a)
a <- as.numeric(a)
a
str(a)
rle(a)
sum(is.na(a))
ps
a <- strsplit(ps, split = '')
a <- unlist(a)
a <- as.numeric(a)
a
a
str(a)
?sub
?sub
gsub("0", "1", ps)
sub("0", "1", ps)
ps
sub("2", "1", ps)
sub("2", "1", ps)
1:3
ps
a <- strsplit(ps, split = '')
a <- unlist(a)
a <- as.numeric(a)
a <- rle(a)
a
a
a <- strsplit(ps, split = '')
a <- unlist(a)
a <- as.numeric(a)
a
a <- strsplit(ps, split = '')
a <- unlist(a)
a <- as.numeric(a)
a
which(a, a==1)
which(a==1)
a <- 0
a
which(a == 1)
a <- strsplit(ps, split = '')
a <- unlist(a)
a <- as.numeric(a)
a
sum(a)
a <- NA
a
sum(a)
sum(a > 0)
a <- strsplit(ps, split = '')
a <- unlist(a)
a <- as.numeric(a)
is.na(sum(a))
sum(a) > 0
yy <- ps
yy
library(CADF)
?Customer
library(CADF)
library(CADF)
data(transactions)
a <- split(transactions, transactions$ID)
a <- Filter(function(x) nrow(x) > 2, a)
b <- sample(1:length(a), 1)
a[[b]]
cust <- Customer$new(a[[b]])
library(CADF)
data(transactions)
a <- split(transactions, transactions$ID)
a <- Filter(function(x) nrow(x) > 2, a)
b <- sample(1:length(a), 1)
a[[b]]
cust <- Customer$new(a[[b]])
