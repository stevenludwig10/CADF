// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// myseq
NumericVector myseq(int first, int last);
RcppExport SEXP _CADF_myseq(SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(myseq(first, last));
    return rcpp_result_gen;
END_RCPP
}
// zeros
NumericVector zeros(int x);
RcppExport SEXP _CADF_zeros(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(zeros(x));
    return rcpp_result_gen;
END_RCPP
}
// ones
NumericVector ones(int len);
RcppExport SEXP _CADF_ones(SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(ones(len));
    return rcpp_result_gen;
END_RCPP
}
// create_discount_vector
NumericVector create_discount_vector(double amount, int duration, double discountrate);
RcppExport SEXP _CADF_create_discount_vector(SEXP amountSEXP, SEXP durationSEXP, SEXP discountrateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type amount(amountSEXP);
    Rcpp::traits::input_parameter< int >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< double >::type discountrate(discountrateSEXP);
    rcpp_result_gen = Rcpp::wrap(create_discount_vector(amount, duration, discountrate));
    return rcpp_result_gen;
END_RCPP
}
// calculate_St_vector
NumericVector calculate_St_vector(NumericVector r);
RcppExport SEXP _CADF_calculate_St_vector(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_St_vector(r));
    return rcpp_result_gen;
END_RCPP
}
// retention_simulator
DataFrame retention_simulator(double MonthlyPayment, double DiscountRate, int NumberMonths, NumericVector RetentionRates);
RcppExport SEXP _CADF_retention_simulator(SEXP MonthlyPaymentSEXP, SEXP DiscountRateSEXP, SEXP NumberMonthsSEXP, SEXP RetentionRatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type MonthlyPayment(MonthlyPaymentSEXP);
    Rcpp::traits::input_parameter< double >::type DiscountRate(DiscountRateSEXP);
    Rcpp::traits::input_parameter< int >::type NumberMonths(NumberMonthsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type RetentionRates(RetentionRatesSEXP);
    rcpp_result_gen = Rcpp::wrap(retention_simulator(MonthlyPayment, DiscountRate, NumberMonths, RetentionRates));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CADF_myseq", (DL_FUNC) &_CADF_myseq, 2},
    {"_CADF_zeros", (DL_FUNC) &_CADF_zeros, 1},
    {"_CADF_ones", (DL_FUNC) &_CADF_ones, 1},
    {"_CADF_create_discount_vector", (DL_FUNC) &_CADF_create_discount_vector, 3},
    {"_CADF_calculate_St_vector", (DL_FUNC) &_CADF_calculate_St_vector, 1},
    {"_CADF_retention_simulator", (DL_FUNC) &_CADF_retention_simulator, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CADF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
